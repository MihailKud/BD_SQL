/* Курсовая работа по курсу "Основы реляционных баз данных. MySQL"
СТУДЕНТ: КУДРЯВЦЕВ МИХАИЛ АЛЕКСАНДРОВИЧ

* В рамках курсовой работы предполагается в учебных целях разработать базу данных (БД) образовательного учреждения, 
* предназначенную для накопления и в дальнейшем использования (анализа) информации об учебном процессе.
* В качестве образца структуры образовательного учреждения будет использована модель общеобразовательной средней школы.
* БД будет содержать информацию о следующих объектах (таблицы): преподаватели, ученики, помещения, предметы обучения, 
* оценки, классы, уроки, полученные учениками оценки, проведенные занятия(уроки), а также отношения
* между этими объектами (эти связи (отношения) формируются путем программирования ключей (первичных, внешних)).
* Такая структура будет позволять сразу получать информацию об успеваемости каждого из учеников, а также нагрузку учителя.
* В дальнейшем вполне возможно расширение функционала. 
* В учебных целях будут сделаны определенные ограничения по объему и размерам. 
* Наполнение базы данных будет осуществляться тестовыми вымышленными данными небольшого объема.
*      
*/

-- Создаем и подключаемся к БД kursovaya_rabota
DROP DATABASE IF EXISTS kursovaya_rabota;
CREATE DATABASE kursovaya_rabota;
USE kursovaya_rabota;

-- Создаем таблицу для хранения информации о преподавателях 
DROP TABLE IF EXISTS prepodavatel;
CREATE TABLE prepodavatel 
(	prepodavatelID SERIAL PRIMARY KEY, -- SERIAL = BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE
    familiya VARCHAR(50) COMMENT 'Фамилия преподавателя',
    imya VARCHAR(50) COMMENT 'Имя',
    otchestvo VARCHAR(50) COMMENT 'Отчество',
    data_pr_na_rabotu DATE COMMENT 'Дата приема на работу в школу',
    is_deleted BIT DEFAULT 0, 
    INDEX prepodavatel_index(familiya)
);

-- Заполняем таблицу prepodavatel данными.  
INSERT INTO prepodavatel (familiya, imya, otchestvo, data_pr_na_rabotu) VALUES 
('Завидов', 'Борис', 'Дмитриевич', '2015-01-01'),
('Иванов', 'Семен', 'Дмитриевич', '2016-02-02'),
('Павлов', 'Николай', 'Витальевич', '2017-03-03'),
('Мерзоев', 'Максим', 'Семенович', '2018-04-04'),
('Наследова', 'Екатерина', 'Дмитриевна', '2019-05-05'),
('Завидов', 'Олег', 'Павлович', '2015-06-06'),
('Мальцева', 'Галина', 'Олеговна', '2016-07-07'),
('Мальцев', 'Николай', 'Петрович', '2017-08-08'),
('Дмитриев', 'Павел', 'Сергеевич', '2018-01-01'),
('Садова', 'Мария', 'Павловна', '2019-02-02'),
('Садов', 'Семен', 'Витальевич', '2015-03-03'),
('Викторов', 'Вадим' , 'Иванович', '2016-04-04'),
('Викторова', 'Мария', 'Борисовна', '2017-05-05'),
('Белкин', 'Виталий', 'Дмитриевич', '2018-06-06'),
('Зверев', 'Михаил', 'Николаевич', '2019-07-07'),
('Белкина', 'Лариса', 'Олеговна', '2015-08-08'),
('Дронов', 'Николай', 'Алексеевич', '2016-09-09'),
('Волгин', 'Иван', 'Ильич', '2017-10-10'),
('Рыбин', 'Петр', 'Николаевич', '2018-11-11'),
('Рыбалко', 'Светлана', 'Васильевна', '2019-12-12');

-- Создаем таблицу для хранения информации об учениках
DROP TABLE IF EXISTS uchenik;
CREATE TABLE uchenik 
(	uchenikID SERIAL PRIMARY KEY,
    familiya VARCHAR(50) COMMENT 'Фамилия ученика',
    imya VARCHAR(50) COMMENT 'Имя',
    otchestvo VARCHAR(50) COMMENT 'Отчество',
    data_rogdeniya DATE COMMENT 'Дата рождения ученика',
    is_deleted BIT DEFAULT 0, 
    INDEX uchenik_index(familiya)
);

-- Заполняем таблицу uchenik данными.  
INSERT INTO uchenik (familiya, imya, otchestvo, data_rogdeniya) VALUES 
('Завидов', 'Борис', 'Дмитриевич', '2015-01-01'),
('Иванов', 'Семен', 'Дмитриевич', '2014-01-01'),
('Павлов', 'Николай', 'Витальевич', '2005-01-01'),
('Мерзоев', 'Максим', 'Семенович', '2006-01-01'),
('Наследова', 'Екатерина', 'Дмитриевна', '2007-01-01'),
('Завидов', 'Олег', 'Павлович', '2008-01-01'),
('Мальцева', 'Галина', 'Олеговна', '2009-01-01'),
('Мальцев', 'Николай', 'Петрович', '2010-01-01'),
('Дмитриев', 'Павел', 'Сергеевич', '2011-01-01'),
('Садова', 'Мария', 'Павловна', '2012-01-01'),
('Садов', 'Семен', 'Витальевич', '2013-01-01'),
('Викторов', 'Вадим' , 'Иванович', '2014-01-01'),
('Викторова', 'Мария', 'Борисовна', '2015-01-01'),
('Белкин', 'Виталий', 'Дмитриевич', '2005-01-01'),
('Зверев', 'Михаил', 'Николаевич', '2006-01-01'),
('Белкина', 'Лариса', 'Олеговна', '2007-01-01'),
('Дронов', 'Николай', 'Алексеевич', '2008-01-01'),
('Волгин', 'Иван', 'Ильич', '2009-01-01'),
('Рыбин', 'Петр', 'Николаевич', '2010-01-01'),
('Рыбалко', 'Светлана', 'Васильевна', '2011-01-01'),
('Видов', 'Борис', 'Дмитриевич', '2012-01-01'),
('Иванченко', 'Семен', 'Дмитриевич', '2013-01-01'),
('Павловский', 'Николай', 'Витальевич', '2014-01-01'),
('Мирзоев', 'Максим', 'Семенович', '2015-01-01'),
('Надова', 'Екатерина', 'Дмитриевна', '2005-01-01'),
('Завидова', 'Елена', 'Павловна', '2006-01-01'),
('Мальцева', 'Виктория', 'Николаевна', '2007-01-01'),
('Мальцев', 'Николай', 'Петрович', '2008-01-01'),
('Митров', 'Павел', 'Сергеевич', '2009-01-01'),
('Салова', 'Мария', 'Павловна', '2010-01-01'),
('Салов', 'Семен', 'Витальевич', '2011-01-01'),
('Викнаров', 'Вадим' , 'Иванович', '2013-01-01'),
('Викторова', 'Екатерина', 'Борисовна', '2012-01-01'),
('Белкин', 'Виталий', 'Дмитриевич', '2014-01-01'),
('Зверев', 'Михаил', 'Николаевич', '2015-01-01'),
('Белкина', 'Ирина', 'Михайловна', '2005-01-01'),
('Дронов', 'Николай', 'Петрович', '2006-01-01'),
('Волгин', 'Иван', 'Ильич', '2007-01-01'),
('Рябко', 'Петр', 'Николаевич', '2008-01-01'),
('Рыбалевич', 'Светлана', 'Васильевна', '2009-01-01');

-- Создаем таблицу для хранения информации об учебных помещениях
DROP TABLE IF EXISTS kabinet;
CREATE TABLE kabinet 
(	kabinetID SERIAL PRIMARY KEY,
    naimenovanie VARCHAR(60) COMMENT 'Наименование кабинета',
    nomer INT COMMENT 'Номер кабинета',
    etag INT COMMENT 'Номер этажа',
    kol_part INT COMMENT 'Количество парт в кабинете' DEFAULT 0,
    otvet_prepodavatel BIGINT UNSIGNED, -- Преподаватель, закрепленный за кабинетом (указывает на учителя, который,
    -- как правило, проводит занятия в этом своем кабинете и является ответственным за него).
    -- Внешний ключ связан с полем первичного ключа таблицы преподавателей. В случае изменения поля prepodavatelID значение
    -- внешнего ключа будет автоматически изменяться. В случае удаления будет присвоено значение NULL.
    FOREIGN KEY otvet_prepodavatel_key(otvet_prepodavatel) REFERENCES prepodavatel(prepodavatelID)
    ON UPDATE CASCADE
    ON DELETE SET NULL, 
    INDEX kabinet_index(nomer)
);

-- Заполняем таблицу kabinet данными.  
INSERT INTO kabinet (naimenovanie, nomer, etag, kol_part, otvet_prepodavatel) VALUES 
('Кабинет начальной школы', 101, 1, 18, 1),
('Кабинет начальной школы', 102, 1, 16, 2),
('Кабинет начальной школы', 103, 1, 15, 3),
('Кабинет математики', 105, 1, 15, 4),
('Кабинет иностранного языка', 106, 1, 14, 5),
('Кабинет математики', 107, 1, 12, 6),
('Кабинет географии', 201, 2, 15, 7),
('Кабинет географии', 202, 2, 16, 8),
('Актовый зал', 203, 2, 0, 9),
('Кабинет физики', 204, 2, 15, 10),
('Кабинет физики', 205, 2, 15, 11),
('Кабинет химии', 301, 3, 15, 12),
('Кабинет русского языка и литературы', 302, 3, 15, 13),
('Кабинет русского языка и литературы', 303, 3, 15, 14),
('Кабинет математики', 304, 3, 15, 15),
('Кабинет информатики', 305, 3, 15, 16),
('Кабинет информатики', 306, 3, 15, 17),
('Спортивный зал', 108, 1, 0, 18);

-- Создаем таблицу для хранения информации о возможных вариантах оценки знаний ученика
DROP TABLE IF EXISTS assessment;
CREATE TABLE assessment 
(	assessmentID SERIAL PRIMARY KEY,
    naimenovanie VARCHAR(20)
);

-- Заполняем таблицу assessment данными
INSERT INTO assessment (naimenovanie) VALUES 
('2'),
('3'),
('4'),
('5'),
('неудовлетворительно'),
('удовлетворительно'),
('хорошо'),
('отлично');

-- Создаем таблицу для хранения информации о предметах обучения
DROP TABLE IF EXISTS predmet_obucheniya;
CREATE TABLE predmet_obucheniya 
(	predmet_obucheniyaID SERIAL PRIMARY KEY,
    naimenovanie VARCHAR(100)
);

-- Заполняем таблицу predmet_obucheniya данными.
-- Представленный перечень может не совпадать с программами обучения отдельных школ.
-- Основой для наполнения этой таблицы является документ о программе обучения в каждой конкретной школе  
INSERT INTO predmet_obucheniya (naimenovanie) VALUES 
('Русский язык'),
('Родной (нерусский) язык'),
('Литературное чтение'),
('Литературное чтение на родном (нерусском) языке'),
('Иностранный язык'),
('Математика'),
('Обществознание'),
('Окружающий мир'),
('Изобразительное искусство'),
('Музыка'),
('Технология'),
('Физическая культура'),
('Литература'),
('Родная литература'),
('Второй иностранный язык'),
('История'),
('География'),
('Алгебра'),
('Геометрия'),
('Информатика'),
('Основы духовно-нравственной культуры народов России'),
('Основы религиозных культур и светской этики'),
('Физика'),
('Биология'),
('Химия'),
('Основы безопасности жизнедеятельности'),
('Астрономия'),
('Естествознание'),
('Краеведение'),
('Начальная военная подготовка'),
('Основы финансовой грамотности'),
('Основы экономики (экономика)'),
('Риторика'),
('Черчение'),
('Экология');

-- Создаем таблицу для хранения информации об уроках
DROP TABLE IF EXISTS uroki;
CREATE TABLE uroki 
(	urokiID SERIAL PRIMARY KEY,
    naimenovanie VARCHAR(50),
    vremya_uroka VARCHAR(15)
);

-- Заполняем таблицу uroki данными.  
INSERT INTO uroki (naimenovanie, vremya_uroka) VALUES 
('Первый урок', '8:00-8:45'),
('Второй урок', '9:00-9:45'),
('Третий урок', '10:00-10:45'),
('Четвертый урок', '11:00-11:45'),
('Пятый урок', '12:00-12:45'),
('Шестой урок', '13:30-14:15'),
('Седьмой урок', '14:30-15:15'),
('Восьмой урок', '15:30-16:15');

-- Создаем таблицу для хранения информации о классах
DROP TABLE IF EXISTS klass;
CREATE TABLE klass 
(	klassID SERIAL PRIMARY KEY,
    naimenovanie VARCHAR(50),
    klassn_rukovod BIGINT UNSIGNED,
    -- Поле для указания классного руководителя. Здесь будет связь 1-1 (у одного класса может быть только один классный 
    -- руководитель и один учитель может иметь лишь один класс, в котором он будет классным руководителем (в течение 
    -- учебного года).
    -- Внешний ключ связан с полем первичного ключа таблицы преподавателей. В случае изменения поля prepodavatelID значение
    -- внешнего ключа будет автоматически изменяться. В случае удаления будет присвоено значение NULL.
    FOREIGN KEY klassn_rukovod_key(klassn_rukovod) REFERENCES prepodavatel(prepodavatelID)
    ON UPDATE CASCADE
    ON DELETE SET NULL
);

-- Заполняем таблицу klass данными.  
INSERT INTO klass (naimenovanie, klassn_rukovod) VALUES 
('Класс 1а', 1),
('Класс 1б', 2),
('Класс 2а', 3),
('Класс 2б', 4),
('Класс 3а', 5),
('Класс 3б', 6),        
('Класс 4а', 7),
('Класс 4б', 8),
('Класс 5а', 9),
('Класс 6а', 10),
('Класс 7а', 11),
('Класс 8а', 12),
('Класс 9а', 13),
('Класс 10а', 14),
('Класс 11а', 15);

-- Создаем таблицу для хранения связи М-М "ученик-класс". С помощью этого отношения определяется информация о том,
-- в какой класс зачислен ученик и обратная информация - из каких учеников состоит определенный класс.
DROP TABLE IF EXISTS klass_uchenik;
CREATE TABLE klass_uchenik 
(	naimenovanie_klassa BIGINT UNSIGNED,
    imya_uchenika BIGINT UNSIGNED,
    PRIMARY KEY (naimenovanie_klassa, imya_uchenika),
    FOREIGN KEY naimenovanie_klassa_key(naimenovanie_klassa) REFERENCES klass(klassID)
    ON UPDATE CASCADE
    ON DELETE CASCADE,
    FOREIGN KEY imya_uchenika_key(imya_uchenika) REFERENCES uchenik(uchenikID)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);

-- Заполняем таблицу klass_uchenik данными.  
INSERT INTO klass_uchenik (naimenovanie_klassa, imya_uchenika) VALUES 
(1, 1),
(1, 2),
(1, 3),     
(1, 4),
(2, 5),
(2, 6),
(2, 7),
(3, 8),
(3, 9),
(4, 10),
(4, 11),
(5, 12),
(5, 13),
(6, 14),
(6, 15),
(7, 16),
(7, 17),
(8, 18),
(8, 19),
(8, 20),
(9, 21),
(9, 22),
(10, 23),
(10, 24),
(10, 25),
(11, 26),
(11, 27),
(12, 28),
(12, 29),
(12, 30),
(12, 31),
(13, 32),
(13, 33),
(13, 34),
(13, 35),
(14, 36),
(14, 37),
(15, 38),
(15, 39),
(15, 40);

-- Создаем таблицу для хранения информации о полученных учениками оценках. Фактически это информация об успеваемости 
-- каждого ученика 
DROP TABLE IF EXISTS assessment_uchenikov;
CREATE TABLE assessment_uchenikov 
(	assessment_uchenikovID SERIAL PRIMARY KEY,
    uchenik_s_ass BIGINT UNSIGNED, -- ученик, получивший оценку (оцененный ученик)
    urok_proved BIGINT UNSIGNED, -- урок, на котором была проведена (поставлена) оценка 
    data_uroka DATE, -- дата проведения занятия
    predmet_obuch BIGINT UNSIGNED, -- предмет, по которому была поставлена оценка
    prepodavatel_ass BIGINT UNSIGNED, -- учитель, который оценил ученика
    assessment_ucheniku BIGINT UNSIGNED, -- оценка, которая выставлена ученику
    FOREIGN KEY uchenik_s_ass_key(uchenik_s_ass) REFERENCES uchenik(uchenikID)
    ON UPDATE CASCADE
    ON DELETE SET NULL,
    FOREIGN KEY urok_proved_key(urok_proved) REFERENCES uroki(urokiID)
    ON UPDATE CASCADE
    ON DELETE SET NULL,
    FOREIGN KEY predmet_obuch_key(predmet_obuch) REFERENCES predmet_obucheniya(predmet_obucheniyaID)
    ON UPDATE CASCADE
    ON DELETE SET NULL,
    FOREIGN KEY prepodavatel_ass_key(prepodavatel_ass) REFERENCES prepodavatel(prepodavatelID)
    ON UPDATE CASCADE
    ON DELETE SET NULL,
    FOREIGN KEY assessment_ucheniku_key(assessment_ucheniku) REFERENCES assessment(assessmentID)
    ON UPDATE CASCADE
    ON DELETE SET NULL    
);

-- Заполняем таблицу assessment_uchenikov данными. Данные вымышлены и небольшого объема.
-- В рабочей ситуации эта таблица может наполняться в реальном времени учителем (путем заполнения
-- подготовленной графической формы) в ходе проведения урока при наличии возможности подключения к БД. 
INSERT INTO assessment_uchenikov (uchenik_s_ass, urok_proved, data_uroka, predmet_obuch, prepodavatel_ass, assessment_ucheniku)
VALUES 
(1, 1, '2022-11-22', 1, 1, 7),
(2, 1, '2022-11-22', 2, 2, 8),
(3, 1, '2022-11-22', 3, 3, 6),
(4, 2, '2022-11-23', 4, 4, 4),
(5, 2, '2022-11-23', 5, 4, 5),
(6, 2, '2022-11-23', 6, 5, 3),
(7, 2, '2022-11-24', 16, 5, 4),
(8, 3, '2022-11-24', 17, 7, 5),
(9, 3, '2022-11-24', 18, 7, 6),
(10, 4, '2022-11-24', 19, 8, 7),
(11, 4, '2022-11-24', 11, 9, 8),
(12, 5, '2022-11-25', 12, 10, 7),
(13, 5, '2022-11-25', 13, 11, 6),
(14, 6, '2022-11-25', 14, 12, 4),
(15, 7, '2022-11-25', 15, 12, 3);

-- Создаем таблицу для хранения информации о проведенных занятиях. Фактически это информация о нагрузке и отчетности  
-- учителя. 
DROP TABLE IF EXISTS proveden_uroki;
CREATE TABLE proveden_uroki 
(	proveden_urokiID SERIAL PRIMARY KEY,
    predmet_uroka BIGINT UNSIGNED, -- предмет обучения, по которому проходило занятие
    urok_proved BIGINT UNSIGNED, -- урок, который проводился
    klass_uchenikov BIGINT UNSIGNED, -- класс, для которого проводилось занятие (урок) 
    data_uroka DATE, -- дата проведения занятия
    prepodavatel_urok BIGINT UNSIGNED, -- учитель, который проводил урок
    FOREIGN KEY predmet_uroka_key(predmet_uroka) REFERENCES predmet_obucheniya(predmet_obucheniyaID)
    ON UPDATE CASCADE
    ON DELETE SET NULL,
    FOREIGN KEY urok_proved_key(urok_proved) REFERENCES uroki(urokiID)
    ON UPDATE CASCADE
    ON DELETE SET NULL,
    FOREIGN KEY klass_uchenikov_key(klass_uchenikov) REFERENCES klass(klassID)
    ON UPDATE CASCADE
    ON DELETE SET NULL,
    FOREIGN KEY prepodavatel_urok_key(prepodavatel_urok) REFERENCES prepodavatel(prepodavatelID)
    ON UPDATE CASCADE
    ON DELETE SET NULL    
);
-- Заполняем таблицу proveden_uroki данными. Данные вымышлены и небольшого объема.
-- Учитывая, что информация предназначена лишь для тстирования (демонстрации) работы, то могут возникать
-- ситуации, на которые не стоит обращать особого внимания. Например, в первом классе возможно проведение 
-- урока по предмету, который преподается в старших классах и т.п. 
-- В рабочей ситуации эта таблица может наполняться в реальном времени учителем (путем заполнения
-- подготовленной графической формы) в ходе проведения урока при наличии возможности подключения к БД. 
INSERT INTO proveden_uroki (predmet_uroka, urok_proved, klass_uchenikov, data_uroka, prepodavatel_urok)
VALUES 
(1, 1, 1, '2022-11-22', 1),
(2, 2, 2, '2022-11-22', 2),
(3, 3, 3, '2022-11-22', 3),
(4, 4, 4, '2022-11-22', 4),
(5, 5, 5, '2022-11-22', 5),
(6, 6, 6, '2022-11-23', 6),
(7, 7, 7, '2022-11-23', 7),
(8, 8, 8, '2022-11-23', 8),
(9, 1, 9, '2022-11-23', 9),
(10, 1, 10, '2022-11-23', 10),
(11, 2, 11, '2022-11-23', 11),
(12, 3, 12, '2022-11-24', 1),
(13, 4, 13, '2022-11-24', 2),
(14, 5, 14, '2022-11-24', 3),
(15, 6, 15, '2022-11-24', 4),
(16, 7, 1, '2022-11-24', 5),
(17, 8, 2, '2022-11-24', 6),
(18, 1, 3, '2022-11-25', 7),
(19, 1, 4, '2022-11-25', 8),
(20, 2, 5, '2022-11-25', 9),
(21, 3, 6, '2022-11-25', 10),
(22, 4, 7, '2022-11-25', 11),
(23, 5, 8, '2022-11-25', 12),
(24, 6, 9, '2022-11-25', 13),
(25, 7, 10, '2022-11-21', 1),
(26, 8, 11, '2022-11-21', 2),
(1, 1, 12, '2022-11-21', 3),
(2, 1, 13, '2022-11-21', 4),
(3, 2, 14, '2022-11-21', 5),
(4, 3, 15, '2022-11-21', 6);


